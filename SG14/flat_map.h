/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

// This is an implementation of the proposed "std::flat_map" as specified in
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0429r6.pdf

#include <stddef.h>
#include <algorithm>
#include <functional>
#include <initializer_list>
#include <iterator>
#include <vector>

namespace stdext {

namespace flatmap_detail {
    template<class T, class = void> struct qualifies_as_range : std::false_type {};
    template<class T> struct qualifies_as_range<T, decltype(
        std::begin( std::declval<T()>()() ), void(),
        std::end( std::declval<T()>()() ), void()
    )> : std::true_type {};

    template<class It>
    using is_random_access_iterator = std::is_convertible<
        typename std::iterator_traits<It>::iterator_category,
        std::random_access_iterator_tag
    >;

    template<int I> struct priority_tag : priority_tag<I-1> {};
    template<> struct priority_tag<0> {};

    // As proposed in P0591R4. Guaranteed copy elision makes this do the right thing.
    template<class T, class Alloc, class... Args, class = std::enable_if_t<
        std::uses_allocator<T, Alloc>::value && std::is_constructible<T, std::allocator_arg_t, const Alloc&, Args&&...>::value
    >>
    T make_obj_using_allocator_(priority_tag<3>, const Alloc& alloc, Args&&... args) {
        return T(std::allocator_arg, alloc, static_cast<Args&&>(args)...);
    }
    template<class T, class Alloc, class... Args, class = std::enable_if_t<
        std::uses_allocator<T, Alloc>::value && std::is_constructible<T, Args&&..., const Alloc&>::value
    >>
    T make_obj_using_allocator_(priority_tag<2>, const Alloc& alloc, Args&&... args) {
        return T(static_cast<Args&&>(args)..., alloc);
    }
    template<class T, class Alloc, class... Args, class = std::enable_if_t<
        !std::uses_allocator<T, Alloc>::value && std::is_constructible<T, Args&&...>::value
    >>
    T make_obj_using_allocator_(priority_tag<1>, const Alloc&, Args&&... args) {
        return T(static_cast<Args&&>(args)...);
    }
    template<class T, class Alloc, class... Args>
    T make_obj_using_allocator_(priority_tag<0>, const Alloc&, Args&&...) {
        static_assert(sizeof(T)==0, "this request for uses-allocator construction is ill-formed");
    }
    template<class T, class Alloc, class... Args>
    T make_obj_using_allocator(const Alloc& alloc, Args&&... args) {
        return make_obj_using_allocator_<T>(priority_tag<3>(), alloc, static_cast<Args&&>(args)...);
    }

    template<class Container>
    using cont_key_type = std::remove_const_t<typename Container::value_type::first_type>;

    template<class Container>
    using cont_mapped_type = typename Container::value_type::second_type;

    template<class InputIterator>
    using iter_key_type = std::remove_const_t<typename std::iterator_traits<InputIterator>::value_type::first_type>;

    template<class InputIterator>
    using iter_mapped_type = typename std::iterator_traits<InputIterator>::value_type::second_type;

    template<class...> using void_t = void;

    template<class A, class = void>
    struct qualifies_as_allocator : std::false_type {};
    template<class A>
    struct qualifies_as_allocator<A, void_t<
        typename A::value_type,
        decltype(std::declval<A&>().allocate(size_t{}))
    >> : std::true_type {};

    template<class It>
    using qualifies_as_input_iterator = std::integral_constant<bool, !std::is_integral<It>::value>;

    template<class... Its>
    void swap_together(size_t i, size_t j, Its... its)
    {
        using std::swap;
        int dummy[] = {
            [&](auto it, auto jt) {
                using std::swap;
                swap(*it, *jt);
                return 0;
            }(its + i, its + j) ...
        };
        (void)dummy;
    }

    template<class Predicate, class Head, class... Rest>
    size_t partition_together(Predicate& pred, size_t left, size_t right, Head head, const Rest... rest) {
        while (left < right) {
            while (left != right && pred(*(head + left))) ++left;
            while (left != right && !pred(*(head + (right-1)))) --right;
            if (left + 1 < right) {
                flatmap_detail::swap_together(left, right-1, head, rest...);
                ++left;
                --right;
            }
        }
        return right;
    }

    template<class Compare, class Head, class... Rest>
    void sort_together(Compare& less, size_t left, size_t right, Head head, Rest... rest) {
        if (right - left == 2) {
            if (less(*(head + left), *(head + (left+1)))) {
                // nothing to do
            } else {
                flatmap_detail::swap_together(left, left+1, head, rest...);
            }
        } else if (right - left >= 3) {
            size_t pivot_idx = left + (right - left) / 2;
            // Swap the pivot element all the way to the right.
            if (pivot_idx != right - 1) {
                flatmap_detail::swap_together(pivot_idx, right-1, head, rest...);
            }
            const auto& pivot_elt = *(head + (right-1));
            auto less_than_pivot = [&](const auto& x) -> bool {
                return less(x, pivot_elt);
            };
            size_t correct_pivot_idx = flatmap_detail::partition_together(less_than_pivot, left, right-1, head, rest...);
            if (correct_pivot_idx != right-1) {
                flatmap_detail::swap_together(correct_pivot_idx, right-1, head, rest...);
            }
            flatmap_detail::sort_together(less, left, correct_pivot_idx, head, rest...);
            flatmap_detail::sort_together(less, correct_pivot_idx+1, right, head, rest...);
        }
    }

    template<class Compare, class Head, class... Rest>
    void sort_together(Compare less, Head& head, Rest&... rest) {
        flatmap_detail::sort_together(less, 0, head.size(), head.begin(), rest.begin()...);
    }

    template<class, class> class iter;
    template<class K, class V> iter<K, V> make_iterator(K, V);

    template<class Reference>
    struct arrow_proxy {
        Reference *operator->() { return &data_; }

        template<class, class> friend class iter;

        Reference data_;
    };

    template<class KeyIt, class MappedIt>
    class iter {
    public:
        using difference_type = ptrdiff_t;
        using value_type = std::pair<const typename KeyIt::value_type, typename MappedIt::value_type>;
        using reference = std::pair<typename KeyIt::reference, typename MappedIt::reference>;
        using pointer = arrow_proxy<reference>;
        using iterator_category = std::random_access_iterator_tag;

        iter() = default;
        iter(iter&&) = default;
        iter(const iter&) = default;
        iter& operator=(iter&&) = default;
        iter& operator=(const iter&) = default;
        ~iter() = default;

        template<class CK, class CM,
                 class = std::enable_if_t<std::is_convertible<CK, KeyIt>::value && std::is_convertible<CM, MappedIt>::value>>
        iter(const iter<CK, CM>& other) : kit_(other.private_impl_getkey()), vit_(other.private_impl_getmapped()) {}

        reference operator*() const {
            return reference{*kit_, *vit_};
        }

        pointer operator->() const {
            return arrow_proxy<reference>{reference{*kit_, *vit_}};
        }

        iter& operator++() { ++kit_; ++vit_; return *this; }
        iter& operator--() { --kit_; --vit_; return *this; }
        iter operator++(int) { iter result(*this); ++*this; return result; }
        iter operator--(int) { iter result(*this); --*this; return result; }
        iter& operator+=(ptrdiff_t n) { kit_ += n; vit_ += n; return *this; }
        iter& operator-=(ptrdiff_t n) { kit_ -= n; vit_ -= n; return *this; }
        reference operator[](ptrdiff_t n) const { return *(*this + n); }
        friend iter operator+(iter it, ptrdiff_t n) { it += n; return it; }
        friend iter operator+(ptrdiff_t n, iter it) { it += n; return it; }
        friend iter operator-(iter it, ptrdiff_t n) { it -= n; return it; }
        friend iter operator-(const iter& it, const iter& jt) { return ptrdiff_t(it.kit_ - jt.kit_); }
        friend bool operator==(const iter& a, const iter& b) { return a.kit_ == b.kit_; }
        friend bool operator!=(const iter& a, const iter& b) { return !(a.kit_ == b.kit_); }
        friend bool operator<(const iter& a, const iter& b) { return a.kit_ < b.kit_; }
        friend bool operator<=(const iter& a, const iter& b) { return !(b.kit_ < a.kit_); }
        friend bool operator>(const iter& a, const iter& b) { return b.kit_ < a.kit_; }
        friend bool operator>=(const iter& a, const iter& b) { return !(a.kit_ < b.kit_); }

        KeyIt private_impl_getkey() const { return kit_; }
        MappedIt private_impl_getmapped() const { return vit_; }

    private:
        template<class K, class V>
        friend iter<K, V> make_iterator(K, V);

        explicit iter(KeyIt&& kit, MappedIt&& vit)
            : kit_(static_cast<KeyIt&&>(kit)), vit_(static_cast<MappedIt&&>(vit)) {}
        KeyIt kit_;
        MappedIt vit_;
    };

    template<class K, class V>
    iter<K, V> make_iterator(K kit, V vit) {
        return iter<K, V>(static_cast<K&&>(kit), static_cast<V&&>(vit));
    }

} // namespace flatmap_detail

#ifndef STDEXT_HAS_SORTED_UNIQUE
#define STDEXT_HAS_SORTED_UNIQUE

struct sorted_unique_t { explicit sorted_unique_t() = default; };

#if defined(__cpp_inline_variables)
inline
#endif
constexpr sorted_unique_t sorted_unique {};

#endif // STDEXT_HAS_SORTED_UNIQUE

template<
    class Key,
    class Mapped,
    class Compare = std::less<Key>,
    class KeyContainer = std::vector<Key>,
    class MappedContainer = std::vector<Mapped>
>
class flat_map {
    static_assert(flatmap_detail::is_random_access_iterator<typename KeyContainer::iterator>::value, "");
    static_assert(flatmap_detail::is_random_access_iterator<typename MappedContainer::iterator>::value, "");
    static_assert(std::is_same<Key, typename KeyContainer::value_type>::value, "");
    static_assert(std::is_same<Mapped, typename MappedContainer::value_type>::value, "");
public:
    using key_type = Key;
    using mapped_type = Mapped;
    using value_type = std::pair<const Key, Mapped>;
    using key_compare = Compare;
    using const_key_reference = typename KeyContainer::const_reference;
    using mapped_reference = typename MappedContainer::reference;
    using const_mapped_reference = typename MappedContainer::const_reference;
    using reference = std::pair<const_key_reference, mapped_reference>;
    using const_reference = std::pair<const_key_reference, const_mapped_reference>;
    using size_type = size_t; // TODO: this should be KeyContainer::size_type
    using difference_type = ptrdiff_t; // TODO: this should be KeyContainer::difference_type
    using iterator = flatmap_detail::iter<typename KeyContainer::const_iterator, typename MappedContainer::iterator>;
    using const_iterator = flatmap_detail::iter<typename KeyContainer::const_iterator, typename MappedContainer::const_iterator>;
    using reverse_iterator = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using key_container_type = KeyContainer;
    using mapped_container_type = MappedContainer;

    class value_compare {
        friend class flat_map;
    protected:
        // TODO: this should be private
        Compare comp;
        // TODO: this constructor should be explicit
        value_compare(Compare c): comp(c) {}
    public:
        bool operator()(const_reference x, const_reference y) const {
            return comp(x.first, y.first);
        }
    };

    struct containers {
        KeyContainer keys;
        MappedContainer values;
    };

// =========================================================== CONSTRUCTORS
// This is all one massive overload set!

    flat_map() : flat_map(Compare()) {}

    flat_map(KeyContainer keys, MappedContainer values)
        : c_{static_cast<KeyContainer&&>(keys), static_cast<MappedContainer&&>(values)}, compare_()
    {
        flatmap_detail::sort_together(compare_, c_.keys, c_.values);
    }

    // TODO: surely this should use uses-allocator construction
    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(KeyContainer keys, MappedContainer values, const Alloc& a)
        : flat_map(KeyContainer(static_cast<KeyContainer&&>(keys), a), MappedContainer(static_cast<MappedContainer&&>(values), a)) {}

    template<class Container,
             std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value, int> = 0>
    explicit flat_map(const Container& cont)
        : flat_map(std::begin(cont), std::end(cont), Compare()) {}

    template<class Container,
             std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value, int> = 0>
    explicit flat_map(const Container& cont, const Compare& comp)
        : flat_map(std::begin(cont), std::end(cont), comp) {}

    template<class Container, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(const Container& cont, const Alloc& a)
        : flat_map(std::begin(cont), std::end(cont), Compare(), a) {}

    template<class Container, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(const Container& cont, const Compare& comp, const Alloc& a)
        : flat_map(std::begin(cont), std::end(cont), comp, a) {}

    flat_map(sorted_unique_t, KeyContainer keys, MappedContainer values)
        : c_{static_cast<KeyContainer&&>(keys), static_cast<MappedContainer&&>(values)}, compare_() {}

    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(sorted_unique_t s, KeyContainer keys, MappedContainer values, const Alloc& a)
        : flat_map(s, KeyContainer(static_cast<KeyContainer&&>(keys), a), MappedContainer(static_cast<MappedContainer&&>(values), a)) {}

    template<class Container,
             class = std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value>>
    flat_map(sorted_unique_t s, const Container& cont)
        : flat_map(s, std::begin(cont), std::end(cont), Compare()) {}

    template<class Container,
             class = std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value>>
    flat_map(sorted_unique_t s, const Container& cont, const Compare& comp)
        : flat_map(s, std::begin(cont), std::end(cont), comp) {}

    template<class Container, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(sorted_unique_t s, const Container& cont, const Alloc& a)
        : flat_map(s, std::begin(cont), std::end(cont), Compare(), a) {}

    template<class Container, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_range<const Container&>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(sorted_unique_t s, const Container& cont, const Compare& comp, const Alloc& a)
        : flat_map(s, std::begin(cont), std::end(cont), comp, a) {}

    explicit flat_map(const Compare& comp)
        : c_{}, compare_(comp) {}

    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(const Compare& comp, const Alloc& a)
        : c_{flatmap_detail::make_obj_using_allocator<KeyContainer>(a), flatmap_detail::make_obj_using_allocator<MappedContainer>(a)}, compare_(comp) {}

    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    explicit flat_map(const Alloc& a)
        : flat_map(Compare(), a) {}

    // TODO: shouldn't InputIterator be constrained to point to something with "first" and "second" members?
    template<class InputIterator,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value>>
    flat_map(InputIterator first, InputIterator last, const Compare& comp = Compare())
        : compare_(comp)
    {
        for (; first != last; ++first) {
            c_.keys.insert(c_.keys.end(), first->first);
            c_.values.insert(c_.values.end(), first->second);
        }
        flatmap_detail::sort_together(compare_, c_.keys, c_.values);
    }

    template<class InputIterator, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(InputIterator first, InputIterator last, const Compare& comp, const Alloc& a)
        : c_{flatmap_detail::make_obj_using_allocator<KeyContainer>(a), flatmap_detail::make_obj_using_allocator<MappedContainer>(a)}, compare_(comp)
    {
        for (; first != last; ++first) {
            c_.keys.insert(c_.keys.end(), first->first);
            c_.values.insert(c_.values.end(), first->second);
        }
        flatmap_detail::sort_together(compare_, c_.keys, c_.values);
    }

    template<class InputIterator, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(InputIterator first, InputIterator last, const Alloc& a)
        : flat_map(first, last, Compare(), a) {}

    template<class InputIterator,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value>>
    flat_map(sorted_unique_t, InputIterator first, InputIterator last, const Compare& comp = Compare())
        : compare_(comp)
    {
        for (; first != last; ++first) {
            c_.keys.insert(c_.keys.end(), first->first);
            c_.values.insert(c_.values.end(), first->second);
        }
    }

    template<class InputIterator, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(sorted_unique_t, InputIterator first, InputIterator last, const Compare& comp, const Alloc& a)
        : c_{flatmap_detail::make_obj_using_allocator<KeyContainer>(a), flatmap_detail::make_obj_using_allocator<MappedContainer>(a)}, compare_(comp)
    {
        for (; first != last; ++first) {
            c_.keys.insert(c_.keys.end(), first->first);
            c_.values.insert(c_.values.end(), first->second);
        }
    }

    template<class InputIterator, class Alloc,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value>>
    flat_map(sorted_unique_t s, InputIterator first, InputIterator last, const Alloc& a)
        : flat_map(s, first, last, Compare(), a) {}

    // TODO: should this be conditionally noexcept?
    // TODO: surely this should use uses-allocator construction
    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(flat_map&& m, const Alloc& a)
        : c_{KeyContainer(static_cast<KeyContainer&&>(m.c_.keys), a), MappedContainer(static_cast<MappedContainer&&>(m.c_.values), a)}, compare_(std::move(m.compare_)) {}

    // TODO: surely this should use uses-allocator construction
    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(const flat_map& m, const Alloc& a)
        : c_{KeyContainer(m.c_.keys, a), MappedContainer(m.c_.values, a)}, compare_{m.compare_} {}

    flat_map(std::initializer_list<value_type>&& il, const Compare& comp = Compare())
        : flat_map(il, comp) {}

    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(std::initializer_list<value_type>&& il, const Compare& comp, const Alloc& a)
        : flat_map(il, comp, a) {}

    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(std::initializer_list<value_type>&& il, const Alloc& a)
        : flat_map(il, Compare(), a) {}

    flat_map(sorted_unique_t s, std::initializer_list<value_type>&& il, const Compare& comp = Compare())
        : flat_map(s, il, comp) {}

    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(sorted_unique_t s, std::initializer_list<value_type>&& il, const Compare& comp, const Alloc& a)
        : flat_map(s, il, comp, a) {}

    template<class Alloc,
             std::enable_if_t<std::uses_allocator<KeyContainer, Alloc>::value && std::uses_allocator<MappedContainer, Alloc>::value, int> = 0>
    flat_map(sorted_unique_t s, std::initializer_list<value_type>&& il, const Alloc& a)
        : flat_map(s, il, Compare(), a) {}

// ========================================================== OTHER MEMBERS

    flat_map& operator=(std::initializer_list<value_type> il) {
        this->clear();
        this->insert(il);
    }

    iterator begin() noexcept { return flatmap_detail::make_iterator(c_.keys.begin(), c_.values.begin()); }
    const_iterator begin() const noexcept { return flatmap_detail::make_iterator(c_.keys.begin(), c_.values.begin()); }
    iterator end() noexcept { return flatmap_detail::make_iterator(c_.keys.end(), c_.values.end()); }
    const_iterator end() const noexcept { return flatmap_detail::make_iterator(c_.keys.end(), c_.values.end()); }

    const_iterator cbegin() const noexcept { return flatmap_detail::make_iterator(c_.keys.begin(), c_.values.begin()); }
    const_iterator cend() const noexcept { return flatmap_detail::make_iterator(c_.keys.end(), c_.values.end()); }

    reverse_iterator rbegin() noexcept { return std::make_reverse_iterator(end()); }
    const_reverse_iterator rbegin() const noexcept { return std::make_reverse_iterator(end()); }
    reverse_iterator rend() noexcept { return std::make_reverse_iterator(begin()); }
    const_reverse_iterator rend() const noexcept { return std::make_reverse_iterator(begin()); }

    const_reverse_iterator crbegin() const noexcept { return std::make_reverse_iterator(begin()); }
    const_reverse_iterator crend() const noexcept { return std::make_reverse_iterator(end()); }

#if __cplusplus >= 201703L
    [[nodiscard]]
#endif
    bool empty() const noexcept { return c_.keys.empty(); }
    size_type size() const noexcept { return c_.keys.size(); }
    size_type max_size() const noexcept { return std::min<size_type>(c_.keys.max_size(), c_.values.max_size()); }

    mapped_reference operator[](const Key& x) {
        return try_emplace(x).first->second;
    }

    mapped_reference operator[](Key&& x) {
        return try_emplace(static_cast<Key&&>(x)).first->second;
    }

    mapped_reference at(const Key& k) {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), k, std::ref(compare_));
        if (kit == c_.keys.end() || compare_(k, *kit)) {
            throw std::out_of_range("flat_map::at");
        } else {
            auto vit = c_.values.begin() + (kit - c_.keys.begin());
            return *vit;
        }
    }

    const_mapped_reference at(const Key& k) const {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), k, std::ref(compare_));
        if (kit == c_.keys.end() || compare_(k, *kit)) {
            throw std::out_of_range("flat_map::at");
        } else {
            auto vit = c_.values.begin() + (kit - c_.keys.begin());
            return *vit;
        }
    }

    template<class... Args, class = decltype(std::pair<Key, Mapped>(std::declval<Args&&>()...), void())>
    std::pair<iterator, bool> emplace(Args&&... args) {
        std::pair<Key, Mapped> t(static_cast<Args&&>(args)...);
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), t.first, std::ref(compare_));
        auto vit = c_.values.begin() + (kit - c_.keys.begin());
        if (kit == c_.keys.end() || compare_(t.first, *kit)) {
            kit = c_.keys.emplace(kit, static_cast<Key&&>(t.first));
            vit = c_.values.emplace(vit, static_cast<Mapped&&>(t.second));
            auto result = flatmap_detail::make_iterator(kit, vit);
            return {std::move(result), true};
        } else {
            auto result = flatmap_detail::make_iterator(kit, vit);
            return {std::move(result), false};
        }
    }

    // TODO: this function cannot possibly meet its amortized-constant-complexity requirement
    template<class... Args>
    iterator emplace_hint(const_iterator, Args&&... args) {
        return this->emplace(static_cast<Args&&>(args)...).first;
    }

    std::pair<iterator, bool> insert(const value_type& x) {
        return this->emplace(x);
    }

    std::pair<iterator, bool> insert(value_type&& x) {
        return this->emplace(static_cast<value_type&&>(x));
    }

    template<class P,
             class = decltype(std::pair<Key, Mapped>(std::declval<P&&>()))>
    std::pair<iterator, bool> insert(P&& x) {
        return this->emplace(static_cast<P&&>(x));
    }

    iterator insert(const_iterator position, const value_type& x) {
        return this->emplace_hint(position, x);
    }

    iterator insert(const_iterator position, value_type&& x) {
        return this->emplace_hint(position, static_cast<value_type&&>(x));
    }

    template<class P,
             class = decltype(std::pair<Key, Mapped>(std::declval<P&&>()))>
    iterator insert(const_iterator position, P&& x) {
        return this->emplace_hint(position, static_cast<P&&>(x));
    }

    template<class InputIterator,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value>>
    void insert(InputIterator first, InputIterator last) {
        while (first != last) {
            this->insert(*first);
            ++first;
        }
    }

    template<class InputIterator,
             class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value>>
    void insert(stdext::sorted_unique_t, InputIterator first, InputIterator last) {
        auto value_compare = this->value_comp();
        auto it = begin();
        while (first != last) {
            std::pair<Key, Mapped> t(*first);
            it = std::lower_bound(it, this->end(), t, std::ref(value_compare));
            if (it == this->end() || value_compare(t, *it)) {
                it = this->emplace(it, std::move(t));
            }
            ++it;
            ++first;
        }
    }

    void insert(std::initializer_list<value_type> il) {
        this->insert(il.begin(), il.end());
    }

    void insert(stdext::sorted_unique_t s, std::initializer_list<value_type> il) {
        this->insert(s, il.begin(), il.end());
    }

    // TODO: as specified, this function fails to preserve the allocator, and has UB for std::pmr containers
    containers extract() && {
        return static_cast<containers&&>(c_);
    }

    void replace(KeyContainer&& keys, MappedContainer&& values) {
        c_.keys = static_cast<KeyContainer&&>(keys);
        c_.values = static_cast<MappedContainer&&>(values);
    }

    template<class... Args>
    std::pair<iterator, bool> try_emplace(const Key& k, Args&&... args) {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), k, std::ref(compare_));
        auto vit = c_.values.begin() + (kit - c_.keys.begin());
        if (kit == c_.keys.end() || compare_(k, *kit)) {
            kit = c_.keys.insert(kit, k);
            vit = c_.values.emplace(vit, static_cast<Args&&>(args)...);
            return {flatmap_detail::make_iterator(kit, vit), true};
        } else {
            return {flatmap_detail::make_iterator(kit, vit), false};
        }
    }

    template<class... Args>
    std::pair<iterator, bool> try_emplace(Key&& k, Args&&... args) {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), k, std::ref(compare_));
        auto vit = c_.values.begin() + (kit - c_.keys.begin());
        if (kit == c_.keys.end() || compare_(k, *kit)) {
            kit = c_.keys.insert(kit, static_cast<Key&&>(k));
            vit = c_.values.emplace(vit, static_cast<Args&&>(args)...);
            return {flatmap_detail::make_iterator(kit, vit), true};
        } else {
            return {flatmap_detail::make_iterator(kit, vit), false};
        }
    }

    // TODO: use the hint, here
    template<class... Args>
    iterator try_emplace(const_iterator, const Key& k, Args&&... args) {
        return try_emplace(k, static_cast<Args&&>(args)...).first;
    }

    // TODO: use the hint, here
    template<class... Args>
    iterator try_emplace(const_iterator, Key&& k, Args&&... args) {
        return try_emplace(static_cast<Key&&>(k), static_cast<Args&&>(args)...).first;
    }

    template<class M>
    std::pair<iterator, bool> insert_or_assign(const Key& k, M&& obj);
    template<class M>
    std::pair<iterator, bool> insert_or_assign(Key&& k, M&& obj);
    template<class M>
    iterator insert_or_assign(const_iterator hint, const Key& k, M&& obj);
    template<class M>
    iterator insert_or_assign(const_iterator hint, Key&& k, M&& obj);

    iterator erase(iterator position) {
        auto kit = position.private_impl_getkey();
        auto vit = position.private_impl_getmapped();
        // TODO: what if either of these next two lines throws an exception?
        auto kitmut = c_.keys.erase(kit);
        auto vitmut = c_.values.erase(vit);
        return flatmap_detail::make_iterator(kitmut, vitmut);
    }

    iterator erase(const_iterator position) {
        auto kit = position.private_impl_getkey();
        auto vit = position.private_impl_getmapped();
        // TODO: what if either of these next two lines throws an exception?
        auto kitmut = c_.keys.erase(kit);
        auto vitmut = c_.values.erase(vit);
        return flatmap_detail::make_iterator(kitmut, vitmut);
    }

    size_type erase(const Key& k) {
        auto it = this->find(k);
        if (it != this->end()) {
            this->erase(it);
            return 1;
        }
        return 0;
    }

    iterator erase(const_iterator first, const_iterator last) {
        auto kfirst = first.private_impl_getkey();
        auto vfirst = first.private_impl_getmapped();
        auto klast = last.private_impl_getkey();
        auto vlast = last.private_impl_getmapped();
        // TODO: what if either of these next two lines throws an exception?
        auto kitmut = c_.keys.erase(kfirst, klast);
        auto vitmut = c_.values.erase(vfirst, vlast);
        return flatmap_detail::make_iterator(kitmut, vitmut);
    }

    void swap(flat_map& fm) noexcept
#if defined(__cpp_lib_is_swappable)
        (std::is_nothrow_swappable<KeyContainer>::value && std::is_nothrow_swappable<Compare>::value)
#endif
    {
        using std::swap;
        swap(c_.keys, fm.c_.keys);
        swap(c_.values, fm.c_.values);
        swap(compare_, fm.compare_);
    }

    void clear() noexcept {
        c_.keys.clear();
        c_.values.clear();
    }

    key_compare key_comp() const {
        return compare_;
    }

    value_compare value_comp() const {
        return value_compare(compare_);
    }

    const KeyContainer& keys() const {
        return c_.keys;
    }

    const MappedContainer& values() const {
        return c_.values;
    }


    iterator find(const Key& k) {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), k, std::ref(compare_));
        if (kit == c_.keys.end() || compare_(k, *kit)) {
            return this->end();
        }
        auto vit = c_.values.begin() + (kit - c_.keys.begin());
        return flatmap_detail::make_iterator(kit, vit);
    }

    const_iterator find(const Key& k) const {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), k, std::ref(compare_));
        if (kit == c_.keys.end() || compare_(k, *kit)) {
            return this->end();
        }
        auto vit = c_.values.begin() + (kit - c_.keys.begin());
        return flatmap_detail::make_iterator(kit, vit);
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    iterator find(const K& x) {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), x, std::ref(compare_));
        if (kit == c_.keys.end() || compare_(x, *kit)) {
            return this->end();
        }
        auto vit = c_.values.begin() + (kit - c_.keys.begin());
        return flatmap_detail::make_iterator(kit, vit);
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    const_iterator find(const K& x) const {
        auto kit = std::lower_bound(c_.keys.begin(), c_.keys.end(), x, std::ref(compare_));
        if (kit == c_.keys.end() || compare_(x, *kit)) {
            return this->end();
        }
        auto vit = c_.values.begin() + (kit - c_.keys.begin());
        return flatmap_detail::make_iterator(kit, vit);
    }

// TODO

    size_type count(const Key& x) const {
        return this->contains(x) ? 1 : 0;
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    size_type count(const K& x) const {
        return this->contains(x) ? 1 : 0;
    }

    bool contains(const Key& x) const {
        return this->find(x) != this->end();
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    bool contains(const K& x) const {
        return this->find(x) != this->end();
    }

    iterator lower_bound(const Key& t) {
        return std::lower_bound(this->begin(), this->end(), t, std::ref(compare_));
    }

    const_iterator lower_bound(const Key& t) const {
        return std::lower_bound(this->begin(), this->end(), t, std::ref(compare_));
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    iterator lower_bound(const K& x) {
        return std::lower_bound(this->begin(), this->end(), x, std::ref(compare_));
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    const_iterator lower_bound(const K& x) const {
        return std::lower_bound(this->begin(), this->end(), x, std::ref(compare_));
    }

    iterator upper_bound(const Key& t) {
        return std::upper_bound(this->begin(), this->end(), t, std::ref(compare_));
    }

    const_iterator upper_bound(const Key& t) const {
        return std::upper_bound(this->begin(), this->end(), t, std::ref(compare_));
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    iterator upper_bound(const K& x) {
        return std::upper_bound(this->begin(), this->end(), x, std::ref(compare_));
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    const_iterator upper_bound(const K& x) const {
        return std::upper_bound(this->begin(), this->end(), x, std::ref(compare_));
    }

    std::pair<iterator, iterator> equal_range(const Key& t) {
        return std::equal_range(this->begin(), this->end(), t, std::ref(compare_));
    }

    std::pair<const_iterator, const_iterator> equal_range(const Key& t) const {
        return std::equal_range(this->begin(), this->end(), t, std::ref(compare_));
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    std::pair<iterator, iterator> equal_range(const K& x) {
        return std::equal_range(this->begin(), this->end(), x, std::ref(compare_));
    }

    template<class K,
             class Compare_ = Compare, class = typename Compare_::is_transparent>
    std::pair<const_iterator, const_iterator> equal_range(const K& x) const {
        return std::equal_range(this->begin(), this->end(), x, std::ref(compare_));
    }

private:
    containers c_;
    Compare compare_;
};

// TODO: all six comparison operators should be invisible friends
template<class Key, class Compare, class KeyContainer>
bool operator==(const flat_map<Key, Compare, KeyContainer>& x, const flat_map<Key, Compare, KeyContainer>& y)
{
    return std::equal(x.begin(), x.end(), y.begin(), y.end());
}

template<class Key, class Compare, class KeyContainer>
bool operator!=(const flat_map<Key, Compare, KeyContainer>& x, const flat_map<Key, Compare, KeyContainer>& y)
{
    return !(x == y);
}

template<class Key, class Compare, class KeyContainer>
bool operator<(const flat_map<Key, Compare, KeyContainer>& x, const flat_map<Key, Compare, KeyContainer>& y)
{
    return std::lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
}

template<class Key, class Compare, class KeyContainer>
bool operator>(const flat_map<Key, Compare, KeyContainer>& x, const flat_map<Key, Compare, KeyContainer>& y)
{
    return (y < x);
}

template<class Key, class Compare, class KeyContainer>
bool operator<=(const flat_map<Key, Compare, KeyContainer>& x, const flat_map<Key, Compare, KeyContainer>& y)
{
    return !(y < x);
}

template<class Key, class Compare, class KeyContainer>
bool operator>=(const flat_map<Key, Compare, KeyContainer>& x, const flat_map<Key, Compare, KeyContainer>& y)
{
    return !(x < y);
}

template<class Key, class Compare, class KeyContainer>
void swap(flat_map<Key, Compare, KeyContainer>& x, flat_map<Key, Compare, KeyContainer>& y) noexcept(noexcept(x.swap(y)))
{
    return x.swap(y);
}

#if defined(__cpp_deduction_guides)

// TODO: this deduction guide should maybe be constrained by qualifies_as_range
template<class Container,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Container>::value>>
flat_map(Container)
    -> flat_map<flatmap_detail::cont_key_type<Container>, flatmap_detail::cont_mapped_type<Container>>;

template<class KeyContainer, class MappedContainer,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<KeyContainer>::value && !flatmap_detail::qualifies_as_allocator<MappedContainer>::value>>
flat_map(KeyContainer, MappedContainer)
    -> flat_map<typename KeyContainer::value_type,
                typename MappedContainer::value_type,
                std::less<typename KeyContainer::value_type>,
                KeyContainer, MappedContainer>;

// TODO: all these deduction guides that ignore the Allocator parameter are wrong, but especially this one
template<class Container, class Allocator,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Container>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value && std::uses_allocator<Container, Allocator>::value>>
flat_map(Container, Allocator, int=0/*to please MSVC*/)
    -> flat_map<flatmap_detail::cont_key_type<Container>, flatmap_detail::cont_mapped_type<Container>>;

template<class KeyContainer, class MappedContainer, class Allocator,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<KeyContainer>::value && !flatmap_detail::qualifies_as_allocator<MappedContainer>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value && std::uses_allocator<KeyContainer, Allocator>::value && std::uses_allocator<MappedContainer, Allocator>::value>>
flat_map(KeyContainer, MappedContainer, Allocator)
    -> flat_map<typename KeyContainer::value_type,
                typename MappedContainer::value_type,
                std::less<typename KeyContainer::value_type>,
                KeyContainer, MappedContainer>;

template<class Container,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Container>::value>>
flat_map(sorted_unique_t, Container)
    -> flat_map<flatmap_detail::cont_key_type<Container>, flatmap_detail::cont_mapped_type<Container>>;

template<class KeyContainer, class MappedContainer,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<KeyContainer>::value && !flatmap_detail::qualifies_as_allocator<MappedContainer>::value>>
flat_map(sorted_unique_t, KeyContainer, MappedContainer)
    -> flat_map<typename KeyContainer::value_type,
                typename MappedContainer::value_type,
                std::less<typename KeyContainer::value_type>,
                KeyContainer, MappedContainer>;

template<class Container, class Allocator,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Container>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value && std::uses_allocator<Container, Allocator>::value>>
flat_map(sorted_unique_t, Container, Allocator, int=0/*to please MSVC*/)
    -> flat_map<flatmap_detail::cont_key_type<Container>, flatmap_detail::cont_mapped_type<Container>>;

template<class KeyContainer, class MappedContainer, class Allocator,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<KeyContainer>::value && !flatmap_detail::qualifies_as_allocator<MappedContainer>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value && std::uses_allocator<KeyContainer, Allocator>::value && std::uses_allocator<MappedContainer, Allocator>::value>>
flat_map(sorted_unique_t, KeyContainer, MappedContainer, Allocator)
    -> flat_map<typename KeyContainer::value_type,
                typename MappedContainer::value_type,
                std::less<typename KeyContainer::value_type>,
                KeyContainer, MappedContainer>;

template<class InputIterator, class Compare = std::less<flatmap_detail::iter_key_type<InputIterator>>,
         class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && !flatmap_detail::qualifies_as_allocator<Compare>::value>>
flat_map(InputIterator, InputIterator, Compare = Compare())
    -> flat_map<flatmap_detail::iter_key_type<InputIterator>, flatmap_detail::iter_mapped_type<InputIterator>, Compare>;

template<class InputIterator, class Compare, class Allocator,
         class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && !flatmap_detail::qualifies_as_allocator<Compare>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(InputIterator, InputIterator, Compare, Allocator)
    -> flat_map<flatmap_detail::iter_key_type<InputIterator>, flatmap_detail::iter_mapped_type<InputIterator>, Compare>;

template<class InputIterator, class Allocator,
         class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(InputIterator, InputIterator, Allocator, int=0/*to please MSVC*/)
    -> flat_map<flatmap_detail::iter_key_type<InputIterator>, flatmap_detail::iter_mapped_type<InputIterator>>;

template<class InputIterator, class Compare = std::less<flatmap_detail::iter_key_type<InputIterator>>,
         class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && !flatmap_detail::qualifies_as_allocator<Compare>::value>>
flat_map(sorted_unique_t, InputIterator, InputIterator, Compare = Compare())
    -> flat_map<flatmap_detail::iter_key_type<InputIterator>, flatmap_detail::iter_mapped_type<InputIterator>, Compare>;

template<class InputIterator, class Compare, class Allocator,
         class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && !flatmap_detail::qualifies_as_allocator<Compare>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(sorted_unique_t, InputIterator, InputIterator, Compare, Allocator)
    -> flat_map<flatmap_detail::iter_key_type<InputIterator>, flatmap_detail::iter_mapped_type<InputIterator>, Compare>;

template<class InputIterator, class Allocator,
         class = std::enable_if_t<flatmap_detail::qualifies_as_input_iterator<InputIterator>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(sorted_unique_t, InputIterator, InputIterator, Allocator, int=0/*to please MSVC*/)
    -> flat_map<flatmap_detail::iter_key_type<InputIterator>, flatmap_detail::iter_mapped_type<InputIterator>>;

template<class Key, class T, class Compare = std::less<Key>,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Compare>::value>>
flat_map(std::initializer_list<std::pair<const Key, T>>, Compare = Compare())
    -> flat_map<Key, T, Compare>;

template<class Key, class T, class Compare, class Allocator,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Compare>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(std::initializer_list<std::pair<const Key, T>>, Compare, Allocator)
    -> flat_map<Key, T, Compare>;

template<class Key, class T, class Allocator,
         class = std::enable_if_t<flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(std::initializer_list<std::pair<const Key, T>>, Allocator, int=0/*to please MSVC*/)
    -> flat_map<Key, T>;

template<class Key, class T, class Compare = std::less<Key>,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Compare>::value>>
flat_map(sorted_unique_t, std::initializer_list<std::pair<const Key, T>>, Compare = Compare())
    -> flat_map<Key, T, Compare>;

template<class Key, class T, class Compare, class Allocator,
         class = std::enable_if_t<!flatmap_detail::qualifies_as_allocator<Compare>::value && flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(sorted_unique_t, std::initializer_list<std::pair<const Key, T>>, Compare, Allocator)
    -> flat_map<Key, T, Compare>;

template<class Key, class T, class Allocator,
         class = std::enable_if_t<flatmap_detail::qualifies_as_allocator<Allocator>::value>>
flat_map(sorted_unique_t, std::initializer_list<std::pair<const Key, T>>, Allocator, int=0/*to please MSVC*/)
    -> flat_map<Key, T>;

#endif

} // namespace stdext
